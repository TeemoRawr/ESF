using Xena.HttpClient.Factories;
using Xena.HttpClient.Models;
using Xena.Startup.Interfaces;

namespace Xena.HttpClient.Configuration;

internal class XenaHttpClientConfigurator : IXenaHttpClientConfigurator
{
    private readonly IXenaWebApplicationBuilder _xenaWebApplicationBuilder;

    public XenaHttpClientConfigurator(IXenaWebApplicationBuilder xenaWebApplicationBuilder)
    {
        _xenaWebApplicationBuilder = xenaWebApplicationBuilder;
    }

<<<<<<< Updated upstream
    public IXenaHttpClientConfigurator AddHttpClient<THttpClient>(
        Func<HttpRequestMessage, Task<string>>? authorizationHeaderFunc = null) 
        where THttpClient : IXenaHttpClient
=======
    public IXenaHttpClientConfigurator AddHttpClient<THttpClient>() where THttpClient : class, IXenaHttpClient
>>>>>>> Stashed changes
    {
        _xenaWebApplicationBuilder.Services.AddScoped<THttpClient>(provider =>
        {
            var xenaHttpClientFactory = provider.GetRequiredService<XenaHttpClientFactory>();
            

<<<<<<< Updated upstream
            return xenaHttpClientFactory.CreateHttpClient<THttpClient>(authorizationHeaderFunc);
=======
            var httpClient = xenaHttpClientFactory.CreateHttpClient<THttpClient>();

            return httpClient;
>>>>>>> Stashed changes
        });

        return this;
    }
}